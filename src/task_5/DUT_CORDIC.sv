// -------------------------------------------------------------
//
// File Name: hdlsrc/cos_sin_CORDIC/DUT_CORDIC.v
// Created: 2024-04-21 00:20:10
//
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
//
//
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-08
// Target subsystem base rate: 1e-08
//
// -------------------------------------------------------------


// -------------------------------------------------------------
//
// Module: DUT_CORDIC
// Source Path: cos_sin_CORDIC/DUT_CORDIC
// Hierarchy Level: 0
// Model version: 2.31
//
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DUT_CORDIC
          (clk,
           reset,
           data_in,
           enable_in,
           X_out,
           Y_out,
           valid_out);



  input   clk;
  input   reset;
  input   signed [19:0] data_in;  // sfix20_En12
  input   enable_in;
  output  signed [14:0] X_out;  // sfix15_En12
  output  valid_out;
  output  signed [14:0] Y_out;  // sfix15_En12


  wire signed [15:0] alpha1_Kn_out1;  // sfix16_En13
  wire signed [15:0] Set_to_0_out1;  // sfix16_En13
  reg signed [19:0] data_in_1;  // sfix20_En12
  reg  enable_in_1;
  wire signed [14:0] ALGORITHM_out1;  // sfix15_En12
  wire signed [14:0] ALGORITHM_out2;  // sfix15_En12
  reg  enable_in_2;

  // PRE-SCALING
  // The input magnitude is prescaled to 1/1.6.
  // This means the finalmagnitude will be 1 and we do not need
  // to scale the output.


  assign alpha1_Kn_out1 = 16'sb0001001101101111;


  assign Set_to_0_out1 = 16'sb0000000000000000;


  always @(posedge clk)
    begin : in_0_pipe_process
      if (reset == 1'b1) begin
        data_in_1 <= 20'sb00000000000000000000;
      end
      else begin
        data_in_1 <= data_in;
      end
    end



  always @(posedge clk)
    begin : in_1_pipe_process
      if (reset == 1'b1) begin
        enable_in_1 <= 1'b0;
      end
      else begin
        enable_in_1 <= enable_in;
      end
    end



  ALGORITHM u_ALGORITHM (.clk(clk),
                         .reset(reset),
                         .X_In(alpha1_Kn_out1),  // sfix16_En13
                         .Y_In(Set_to_0_out1),  // sfix16_En13
                         .Z_In(data_in_1),  // sfix20_En12
                         .Enable(enable_in_1),
                         .X_Out(ALGORITHM_out1),  // sfix15_En12
                         .Y_Out(ALGORITHM_out2)  // sfix15_En12
                         );
  assign X_out = ALGORITHM_out1;

  always @(posedge clk)
    begin : out_1_pipe_process
      if (reset == 1'b1) begin
        enable_in_2 <= 1'b0;
      end
      else begin
        enable_in_2 <= enable_in_1;
      end
    end



  assign valid_out = enable_in_2;

  assign Y_out = ALGORITHM_out2;

endmodule  // DUT_CORDIC

