// -------------------------------------------------------------
// 
// File Name: hdlsrc/cos_sin_CORDIC/ALGORITHM.v
// Created: 2024-04-21 04:28:08
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ALGORITHM
// Source Path: cos_sin_CORDIC/DUT_CORDIC/ALGORITHM
// Hierarchy Level: 1
// Model version: 2.18
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ALGORITHM
          (clk,
           reset,
           X_In,
           Y_In,
           Z_In,
           Enable,
           X_Out,
           Y_Out);


  input   clk;
  input   reset;
  input   signed [15:0] X_In;  // sfix16_En13
  input   signed [15:0] Y_In;  // sfix16_En13
  input   signed [19:0] Z_In;  // sfix20_En12
  input   Enable;
  output  signed [14:0] X_Out;  // sfix15_En12
  output  signed [14:0] Y_Out;  // sfix15_En12


  wire signed [14:0] Rotation_Cell_0_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_0_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_0_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_1_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_1_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_1_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_2_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_2_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_2_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_3_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_3_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_3_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_4_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_4_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_4_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_5_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_5_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_5_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_6_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_6_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_6_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_7_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_7_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_7_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_8_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_8_out2;  // sfix15_En12
  wire signed [19:0] Rotation_Cell_8_out3;  // sfix20_En12
  wire signed [14:0] Rotation_Cell_9_out1;  // sfix15_En12
  wire signed [14:0] Rotation_Cell_9_out2;  // sfix15_En12
  wire Enable_out4;
  reg signed [14:0] Rotation_Cell_9_out1_hold;  // sfix15_En12
  reg signed [14:0] Rotation_Cell_9_out2_hold;  // sfix15_En12


  Rotation_Cell_0 u_Rotation_Cell_0 (.X_In(X_In),  // sfix16_En13
                                     .Y_In(Y_In),  // sfix16_En13
                                     .Z_In(Z_In),  // sfix20_En12
                                     .X_Out(Rotation_Cell_0_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_0_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_0_out3)  // sfix20_En12
                                     );
  Rotation_Cell_1 u_Rotation_Cell_1 (.X_In(Rotation_Cell_0_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_0_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_0_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_1_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_1_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_1_out3)  // sfix20_En12
                                     );
  Rotation_Cell_2 u_Rotation_Cell_2 (.X_In(Rotation_Cell_1_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_1_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_1_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_2_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_2_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_2_out3)  // sfix20_En12
                                     );
  Rotation_Cell_3 u_Rotation_Cell_3 (.X_In(Rotation_Cell_2_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_2_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_2_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_3_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_3_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_3_out3)  // sfix20_En12
                                     );
  Rotation_Cell_4 u_Rotation_Cell_4 (.X_In(Rotation_Cell_3_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_3_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_3_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_4_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_4_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_4_out3)  // sfix20_En12
                                     );
  Rotation_Cell_5 u_Rotation_Cell_5 (.X_In(Rotation_Cell_4_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_4_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_4_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_5_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_5_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_5_out3)  // sfix20_En12
                                     );
  Rotation_Cell_6 u_Rotation_Cell_6 (.X_In(Rotation_Cell_5_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_5_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_5_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_6_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_6_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_6_out3)  // sfix20_En12
                                     );
  Rotation_Cell_7 u_Rotation_Cell_7 (.X_In(Rotation_Cell_6_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_6_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_6_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_7_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_7_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_7_out3)  // sfix20_En12
                                     );
  Rotation_Cell_8 u_Rotation_Cell_8 (.X_In(Rotation_Cell_7_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_7_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_7_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_8_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_8_out2),  // sfix15_En12
                                     .Z_Out(Rotation_Cell_8_out3)  // sfix20_En12
                                     );
  Rotation_Cell_9 u_Rotation_Cell_9 (.X_In(Rotation_Cell_8_out1),  // sfix15_En12
                                     .Y_In(Rotation_Cell_8_out2),  // sfix15_En12
                                     .Z_In(Rotation_Cell_8_out3),  // sfix20_En12
                                     .X_Out(Rotation_Cell_9_out1),  // sfix15_En12
                                     .Y_Out(Rotation_Cell_9_out2)  // sfix15_En12
                                     );
  assign Enable_out4 = Enable;

  always @(posedge clk)
    begin : X_Out_hold_process
      if (reset == 1'b1) begin
        Rotation_Cell_9_out1_hold <= 15'sb000000000000000;
      end
      else begin
        if (Enable_out4) begin
          Rotation_Cell_9_out1_hold <= Rotation_Cell_9_out1;
        end
      end
    end



  assign X_Out = Rotation_Cell_9_out1_hold;

  always @(posedge clk)
    begin : Y_Out_hold_process
      if (reset == 1'b1) begin
        Rotation_Cell_9_out2_hold <= 15'sb000000000000000;
      end
      else begin
        if (Enable_out4) begin
          Rotation_Cell_9_out2_hold <= Rotation_Cell_9_out2;
        end
      end
    end



  assign Y_Out = Rotation_Cell_9_out2_hold;

endmodule  // ALGORITHM

