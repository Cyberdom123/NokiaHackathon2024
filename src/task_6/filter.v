// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/Task_6_template/filter.v
// Created: 2024-04-21 07:44:44
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: filter
// Source Path: Task_6_template/DUT/Filter/filter
// Hierarchy Level: 2
// Model version: 1.107
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter
          (clk,
           reset,
           filter_in,
           filter_out);


  input   clk;
  input   reset;
  input   signed [7:0] filter_in;  // int8
  output  signed [24:0] filter_out;  // sfix25_En16


  wire signed [15:0] coeff1;  // sfix16_En16
  reg signed [7:0] Delay_Pipeline_reg [0:9];  // sfix8 [10]
  reg signed [7:0] Delay_Pipeline_reg_next [0:9];  // sfix8 [10]
  reg signed [7:0] delay_pipeline_1 [0:9];  // sfix8 [10]
  wire signed [7:0] delay_pipeline_0;  // sfix8
  wire signed [7:0] delay_pipeline_1_1;  // sfix8
  wire signed [7:0] delay_pipeline_2;  // sfix8
  wire signed [7:0] delay_pipeline_3;  // sfix8
  wire signed [7:0] delay_pipeline_4;  // sfix8
  wire signed [7:0] delay_pipeline_5;  // sfix8
  wire signed [7:0] delay_pipeline_6;  // sfix8
  wire signed [7:0] delay_pipeline_7;  // sfix8
  wire signed [7:0] delay_pipeline_8;  // sfix8
  wire signed [7:0] delay_pipeline_9;  // sfix8
  wire signed [23:0] multiplier_mul_temp;  // sfix24_En16
  wire signed [22:0] product1;  // sfix23_En16
  wire signed [15:0] coeff2;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_1;  // sfix24_En16
  wire signed [22:0] product2;  // sfix23_En16
  wire signed [24:0] adder_add_cast;  // sfix25_En16
  wire signed [24:0] adder_add_cast_1;  // sfix25_En16
  wire signed [24:0] sum1;  // sfix25_En16
  wire signed [15:0] coeff3;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_2;  // sfix24_En16
  wire signed [22:0] product3;  // sfix23_En16
  wire signed [24:0] adder_add_cast_2;  // sfix25_En16
  wire signed [24:0] sum2;  // sfix25_En16
  wire signed [15:0] coeff4;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_3;  // sfix24_En16
  wire signed [22:0] product4;  // sfix23_En16
  wire signed [24:0] adder_add_cast_3;  // sfix25_En16
  wire signed [24:0] sum3;  // sfix25_En16
  wire signed [15:0] coeff5;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_4;  // sfix24_En16
  wire signed [22:0] product5;  // sfix23_En16
  wire signed [24:0] adder_add_cast_4;  // sfix25_En16
  wire signed [24:0] sum4;  // sfix25_En16
  wire signed [15:0] coeff6;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_5;  // sfix24_En16
  wire signed [22:0] product6;  // sfix23_En16
  wire signed [24:0] adder_add_cast_5;  // sfix25_En16
  wire signed [24:0] sum5;  // sfix25_En16
  wire signed [15:0] coeff7;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_6;  // sfix24_En16
  wire signed [22:0] product7;  // sfix23_En16
  wire signed [24:0] adder_add_cast_6;  // sfix25_En16
  wire signed [24:0] sum6;  // sfix25_En16
  wire signed [15:0] coeff8;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_7;  // sfix24_En16
  wire signed [22:0] product8;  // sfix23_En16
  wire signed [24:0] adder_add_cast_7;  // sfix25_En16
  wire signed [24:0] sum7;  // sfix25_En16
  wire signed [15:0] coeff9;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_8;  // sfix24_En16
  wire signed [22:0] product9;  // sfix23_En16
  wire signed [24:0] adder_add_cast_8;  // sfix25_En16
  wire signed [24:0] sum8;  // sfix25_En16
  wire signed [15:0] coeff10;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_9;  // sfix24_En16
  wire signed [22:0] product10;  // sfix23_En16
  wire signed [24:0] adder_add_cast_9;  // sfix25_En16
  wire signed [24:0] sum9;  // sfix25_En16
  wire signed [15:0] coeff11;  // sfix16_En16
  wire signed [23:0] multiplier_mul_temp_10;  // sfix24_En16
  wire signed [22:0] product11;  // sfix23_En16
  wire signed [24:0] adder_add_cast_10;  // sfix25_En16
  wire signed [24:0] sum10;  // sfix25_En16
  reg signed [31:0] Delay_Pipeline_t_0_0;  // int32
  reg signed [31:0] Delay_Pipeline_t_1;  // int32
  reg signed [31:0] Delay_Pipeline_t_0_1;  // int32
  reg signed [31:0] Delay_Pipeline_t_1_0;  // int32


  assign coeff1 = 16'sb1111011001000100;



  always @(posedge clk)
    begin : Delay_Pipeline_process
      if (reset == 1'b1) begin
        for(Delay_Pipeline_t_1_0 = 32'sd0; Delay_Pipeline_t_1_0 <= 32'sd9; Delay_Pipeline_t_1_0 = Delay_Pipeline_t_1_0 + 32'sd1) begin
          Delay_Pipeline_reg[Delay_Pipeline_t_1_0] <= 8'sb00000000;
        end
      end
      else begin
        for(Delay_Pipeline_t_0_1 = 32'sd0; Delay_Pipeline_t_0_1 <= 32'sd9; Delay_Pipeline_t_0_1 = Delay_Pipeline_t_0_1 + 32'sd1) begin
          Delay_Pipeline_reg[Delay_Pipeline_t_0_1] <= Delay_Pipeline_reg_next[Delay_Pipeline_t_0_1];
        end
      end
    end

  always @* begin

    for(Delay_Pipeline_t_0_0 = 32'sd0; Delay_Pipeline_t_0_0 <= 32'sd9; Delay_Pipeline_t_0_0 = Delay_Pipeline_t_0_0 + 32'sd1) begin
      delay_pipeline_1[Delay_Pipeline_t_0_0] = Delay_Pipeline_reg[Delay_Pipeline_t_0_0];
    end

    Delay_Pipeline_reg_next[0] = filter_in;

    for(Delay_Pipeline_t_1 = 32'sd0; Delay_Pipeline_t_1 <= 32'sd8; Delay_Pipeline_t_1 = Delay_Pipeline_t_1 + 32'sd1) begin
      Delay_Pipeline_reg_next[Delay_Pipeline_t_1 + 32'sd1] = Delay_Pipeline_reg[Delay_Pipeline_t_1];
    end

  end



  assign delay_pipeline_0 = delay_pipeline_1[0];

  assign delay_pipeline_1_1 = delay_pipeline_1[1];

  assign delay_pipeline_2 = delay_pipeline_1[2];

  assign delay_pipeline_3 = delay_pipeline_1[3];

  assign delay_pipeline_4 = delay_pipeline_1[4];

  assign delay_pipeline_5 = delay_pipeline_1[5];

  assign delay_pipeline_6 = delay_pipeline_1[6];

  assign delay_pipeline_7 = delay_pipeline_1[7];

  assign delay_pipeline_8 = delay_pipeline_1[8];

  assign delay_pipeline_9 = delay_pipeline_1[9];

  assign multiplier_mul_temp = filter_in * coeff1;
  assign product1 = multiplier_mul_temp[22:0];



  assign coeff2 = 16'sb1111111100101101;



  assign multiplier_mul_temp_1 = delay_pipeline_0 * coeff2;
  assign product2 = multiplier_mul_temp_1[22:0];



  assign adder_add_cast = {{2{product1[22]}}, product1};
  assign adder_add_cast_1 = {{2{product2[22]}}, product2};
  assign sum1 = adder_add_cast + adder_add_cast_1;



  assign coeff3 = 16'sb0001000100100110;



  assign multiplier_mul_temp_2 = delay_pipeline_1_1 * coeff3;
  assign product3 = multiplier_mul_temp_2[22:0];



  assign adder_add_cast_2 = {{2{product3[22]}}, product3};
  assign sum2 = sum1 + adder_add_cast_2;



  assign coeff4 = 16'sb0010011101011011;



  assign multiplier_mul_temp_3 = delay_pipeline_2 * coeff4;
  assign product4 = multiplier_mul_temp_3[22:0];



  assign adder_add_cast_3 = {{2{product4[22]}}, product4};
  assign sum3 = sum2 + adder_add_cast_3;



  assign coeff5 = 16'sb0011100110111111;



  assign multiplier_mul_temp_4 = delay_pipeline_3 * coeff5;
  assign product5 = multiplier_mul_temp_4[22:0];



  assign adder_add_cast_4 = {{2{product5[22]}}, product5};
  assign sum4 = sum3 + adder_add_cast_4;



  assign coeff6 = 16'sb0100000011100001;



  assign multiplier_mul_temp_5 = delay_pipeline_4 * coeff6;
  assign product6 = multiplier_mul_temp_5[22:0];



  assign adder_add_cast_5 = {{2{product6[22]}}, product6};
  assign sum5 = sum4 + adder_add_cast_5;



  assign coeff7 = 16'sb0011100110111111;



  assign multiplier_mul_temp_6 = delay_pipeline_5 * coeff7;
  assign product7 = multiplier_mul_temp_6[22:0];



  assign adder_add_cast_6 = {{2{product7[22]}}, product7};
  assign sum6 = sum5 + adder_add_cast_6;



  assign coeff8 = 16'sb0010011101011011;



  assign multiplier_mul_temp_7 = delay_pipeline_6 * coeff8;
  assign product8 = multiplier_mul_temp_7[22:0];



  assign adder_add_cast_7 = {{2{product8[22]}}, product8};
  assign sum7 = sum6 + adder_add_cast_7;



  assign coeff9 = 16'sb0001000100100110;



  assign multiplier_mul_temp_8 = delay_pipeline_7 * coeff9;
  assign product9 = multiplier_mul_temp_8[22:0];



  assign adder_add_cast_8 = {{2{product9[22]}}, product9};
  assign sum8 = sum7 + adder_add_cast_8;



  assign coeff10 = 16'sb1111111100101101;



  assign multiplier_mul_temp_9 = delay_pipeline_8 * coeff10;
  assign product10 = multiplier_mul_temp_9[22:0];



  assign adder_add_cast_9 = {{2{product10[22]}}, product10};
  assign sum9 = sum8 + adder_add_cast_9;



  assign coeff11 = 16'sb1111011001000100;



  assign multiplier_mul_temp_10 = delay_pipeline_9 * coeff11;
  assign product11 = multiplier_mul_temp_10[22:0];



  assign adder_add_cast_10 = {{2{product11[22]}}, product11};
  assign sum10 = sum9 + adder_add_cast_10;



  assign filter_out = sum10;

endmodule  // filter

